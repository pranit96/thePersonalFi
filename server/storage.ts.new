import { users, type User, type InsertUser, transactions, type Transaction, type InsertTransaction, salaryRecords, type SalaryRecord, type InsertSalaryRecord, goals, type Goal, type InsertGoal, savingsRecords, type SavingsRecord, type InsertSavingsRecord, categorySpending, type CategorySpending, aiInsights, type AiInsight } from "@shared/schema";
import { db } from "./db";
import { eq, and, desc } from "drizzle-orm";
import { hashPassword } from "./utils/encryption";
import { encryptFinancialData, decryptFinancialData } from "./utils/encryption";
import connectPg from "connect-pg-simple";
import session from "express-session";
import { sql } from "drizzle-orm/sql";

export interface IStorage {
  // Users
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Transactions
  getTransactions(): Promise<Transaction[]>;
  getTransaction(id: number): Promise<Transaction | undefined>;
  createTransaction(transaction: InsertTransaction): Promise<Transaction>;
  deleteTransaction(id: number): Promise<void>;
  
  // Salary
  getSalaryRecords(): Promise<SalaryRecord[]>;
  getSalaryRecord(id: number): Promise<SalaryRecord | undefined>;
  createSalaryRecord(record: InsertSalaryRecord): Promise<SalaryRecord>;
  updateSalaryRecord(id: number, amount: number): Promise<SalaryRecord>;
  
  // Goals
  getGoals(): Promise<Goal[]>;
  getGoal(id: number): Promise<Goal | undefined>;
  createGoal(goal: InsertGoal): Promise<Goal>;
  updateGoal(id: number, currentAmount: number): Promise<Goal>;
  deleteGoal(id: number): Promise<void>;
  
  // Savings
  getSavingsRecords(): Promise<SavingsRecord[]>;
  createSavingsRecord(record: InsertSavingsRecord): Promise<SavingsRecord>;
  
  // Categories
  getCategorySpending(): Promise<CategorySpending[]>;
  
  // AI Insights
  getAiInsights(): Promise<AiInsight[]>;
  
  // Data Management
  deleteAllUserData(): Promise<void>;
  exportUserData(): Promise<{
    transactions: Transaction[];
    salaryRecords: SalaryRecord[];
    goals: Goal[];
    savingsRecords: SavingsRecord[];
    categorySpending: CategorySpending[];
    aiInsights: AiInsight[];
  }>;
  
  // Session store for authentication
  sessionStore: session.Store;
}

// Create the PostgreSQL session store
const PostgresSessionStore = connectPg(session);
const pgPool = {
  connectionString: process.env.DATABASE_URL,
};

export class DatabaseStorage implements IStorage {
  sessionStore: session.Store;
  
  constructor() {
    this.sessionStore = new PostgresSessionStore({ 
      pool: pgPool, 
      createTableIfMissing: true 
    });
  }
  
  // User methods
  async getUser(id: number): Promise<User | undefined> {
    try {
      const [user] = await db.select().from(users).where(eq(users.id, id));
      return user;
    } catch (error) {
      console.error("Error getting user:", error);
      return undefined;
    }
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    try {
      const [user] = await db.select().from(users).where(eq(users.username, username));
      return user;
    } catch (error) {
      console.error("Error getting user by username:", error);
      return undefined;
    }
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    try {
      // Hash the password
      const hashedPassword = hashPassword(insertUser.password);
      
      // Create the user with the hashed password
      const userData = {
        ...insertUser,
        password: hashedPassword,
        email: insertUser.email || null,  // Convert undefined to null
      };
      
      const [user] = await db.insert(users).values(userData).returning();
      return user;
    } catch (error) {
      console.error("Error creating user:", error);
      throw error;
    }
  }

  // Transaction methods
  async getTransactions(): Promise<Transaction[]> {
    try {
      return await db.select().from(transactions).orderBy(desc(transactions.date));
    } catch (error) {
      console.error("Error getting transactions:", error);
      return [];
    }
  }

  async getTransaction(id: number): Promise<Transaction | undefined> {
    try {
      const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));
      return transaction;
    } catch (error) {
      console.error("Error getting transaction:", error);
      return undefined;
    }
  }

  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {
    try {
      // Ensure description is null and not undefined
      const transactionData = {
        ...insertTransaction,
        description: insertTransaction.description || null,
        encryptedData: insertTransaction.encryptedData || null,
        userId: insertTransaction.userId || 1, // Default to 1 if not provided
      };
      
      const [transaction] = await db.insert(transactions).values(transactionData).returning();
      return transaction;
    } catch (error) {
      console.error("Error creating transaction:", error);
      throw error;
    }
  }

  async deleteTransaction(id: number): Promise<void> {
    try {
      await db.delete(transactions).where(eq(transactions.id, id));
    } catch (error) {
      console.error("Error deleting transaction:", error);
      throw error;
    }
  }

  // Salary methods
  async getSalaryRecords(): Promise<SalaryRecord[]> {
    try {
      return await db.select().from(salaryRecords).orderBy(desc(salaryRecords.date));
    } catch (error) {
      console.error("Error getting salary records:", error);
      return [];
    }
  }

  async getSalaryRecord(id: number): Promise<SalaryRecord | undefined> {
    try {
      const [record] = await db.select().from(salaryRecords).where(eq(salaryRecords.id, id));
      return record;
    } catch (error) {
      console.error("Error getting salary record:", error);
      return undefined;
    }
  }

  async createSalaryRecord(insertSalaryRecord: InsertSalaryRecord): Promise<SalaryRecord> {
    try {
      // Ensure values are properly formatted
      const salaryData = {
        ...insertSalaryRecord,
        source: insertSalaryRecord.source || "Primary Job",
        encryptedData: insertSalaryRecord.encryptedData || null,
        userId: insertSalaryRecord.userId || 1,
      };
      
      const [salaryRecord] = await db.insert(salaryRecords).values(salaryData).returning();
      return salaryRecord;
    } catch (error) {
      console.error("Error creating salary record:", error);
      throw error;
    }
  }

  async updateSalaryRecord(id: number, amount: number): Promise<SalaryRecord> {
    try {
      const [updatedRecord] = await db
        .update(salaryRecords)
        .set({ amount })
        .where(eq(salaryRecords.id, id))
        .returning();
      
      return updatedRecord;
    } catch (error) {
      console.error("Error updating salary record:", error);
      throw error;
    }
  }

  // Goal methods
  async getGoals(): Promise<Goal[]> {
    try {
      return await db.select().from(goals).orderBy(desc(goals.date));
    } catch (error) {
      console.error("Error getting goals:", error);
      return [];
    }
  }

  async getGoal(id: number): Promise<Goal | undefined> {
    try {
      const [goal] = await db.select().from(goals).where(eq(goals.id, id));
      return goal;
    } catch (error) {
      console.error("Error getting goal:", error);
      return undefined;
    }
  }

  async createGoal(insertGoal: InsertGoal): Promise<Goal> {
    try {
      // Set default values and ensure proper formatting
      const goalData = {
        ...insertGoal,
        currentAmount: 0,
        completed: false,
        encryptedData: insertGoal.encryptedData || null,
        userId: insertGoal.userId || 1,
        isPrivate: insertGoal.isPrivate ?? true,
      };
      
      const [goal] = await db.insert(goals).values(goalData).returning();
      return goal;
    } catch (error) {
      console.error("Error creating goal:", error);
      throw error;
    }
  }

  async updateGoal(id: number, currentAmount: number): Promise<Goal> {
    try {
      // Calculate if the goal is completed
      const [goal] = await db.select().from(goals).where(eq(goals.id, id));
      if (!goal) {
        throw new Error("Goal not found");
      }
      
      const completed = currentAmount >= goal.targetAmount;
      
      const [updatedGoal] = await db
        .update(goals)
        .set({ 
          currentAmount,
          completed
        })
        .where(eq(goals.id, id))
        .returning();
      
      return updatedGoal;
    } catch (error) {
      console.error("Error updating goal:", error);
      throw error;
    }
  }

  async deleteGoal(id: number): Promise<void> {
    try {
      await db.delete(goals).where(eq(goals.id, id));
    } catch (error) {
      console.error("Error deleting goal:", error);
      throw error;
    }
  }

  // Savings methods
  async getSavingsRecords(): Promise<SavingsRecord[]> {
    try {
      return await db.select().from(savingsRecords).orderBy(desc(savingsRecords.date));
    } catch (error) {
      console.error("Error getting savings records:", error);
      return [];
    }
  }

  async createSavingsRecord(insertSavingsRecord: InsertSavingsRecord): Promise<SavingsRecord> {
    try {
      // Ensure values are properly formatted
      const savingsData = {
        ...insertSavingsRecord,
        description: insertSavingsRecord.description || null,
        goalId: insertSavingsRecord.goalId || null,
      };
      
      const [savingsRecord] = await db.insert(savingsRecords).values(savingsData).returning();
      
      // If there is a goal associated with this savings record, update the goal's current amount
      if (savingsRecord.goalId) {
        const goal = await this.getGoal(savingsRecord.goalId);
        if (goal) {
          await this.updateGoal(goal.id, goal.currentAmount + savingsRecord.amount);
        }
      }
      
      return savingsRecord;
    } catch (error) {
      console.error("Error creating savings record:", error);
      throw error;
    }
  }

  // Category methods - for real application this would analyze actual spending patterns
  async getCategorySpending(): Promise<CategorySpending[]> {
    try {
      // Get categories from actual transactions
      const result = await db.execute<CategorySpending>(sql`
        SELECT 
          category as name, 
          SUM(amount) as amount,
          ROUND((SUM(amount) * 100.0 / (SELECT SUM(amount) FROM transactions)), 2) as percentage,
          0 as change_percentage,
          0 as id
        FROM 
          transactions 
        GROUP BY 
          category 
        ORDER BY 
          amount DESC
      `);
      
      return result as unknown as CategorySpending[];
    } catch (error) {
      console.error("Error getting category spending:", error);
      return [];
    }
  }

  // AI Insights methods - for real application this would generate insights based on transaction data
  async getAiInsights(): Promise<AiInsight[]> {
    try {
      return await db.select().from(aiInsights).orderBy(desc(aiInsights.date));
    } catch (error) {
      console.error("Error getting AI insights:", error);
      return [];
    }
  }

  // Data Management methods
  async deleteAllUserData(): Promise<void> {
    try {
      // In a real application, this would be limited to the current user's data
      await db.delete(transactions);
      await db.delete(salaryRecords);
      await db.delete(goals);
      await db.delete(savingsRecords);
      await db.delete(aiInsights);
    } catch (error) {
      console.error("Error deleting all user data:", error);
      throw error;
    }
  }

  async exportUserData(): Promise<{
    transactions: Transaction[];
    salaryRecords: SalaryRecord[];
    goals: Goal[];
    savingsRecords: SavingsRecord[];
    categorySpending: CategorySpending[];
    aiInsights: AiInsight[];
  }> {
    try {
      // In a real application, this would be limited to the current user's data
      const [
        transactionsList,
        salaryRecordsList,
        goalsList,
        savingsRecordsList,
        categorySpendingList,
        aiInsightsList
      ] = await Promise.all([
        this.getTransactions(),
        this.getSalaryRecords(),
        this.getGoals(),
        this.getSavingsRecords(),
        this.getCategorySpending(),
        this.getAiInsights()
      ]);
      
      // Decrypt sensitive data for export if needed
      const decryptedTransactions = transactionsList.map(transaction => {
        if (transaction.encryptedData) {
          try {
            const decryptedData = decryptFinancialData(transaction.encryptedData);
            return {
              ...transaction,
              decryptedData
            };
          } catch (e) {
            return transaction;
          }
        }
        return transaction;
      });
      
      return {
        transactions: decryptedTransactions,
        salaryRecords: salaryRecordsList,
        goals: goalsList,
        savingsRecords: savingsRecordsList,
        categorySpending: categorySpendingList,
        aiInsights: aiInsightsList
      };
    } catch (error) {
      console.error("Error exporting user data:", error);
      throw error;
    }
  }
}

// Create and export an instance of the storage
export const storage = new DatabaseStorage();